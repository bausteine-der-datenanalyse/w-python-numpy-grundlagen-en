{
  "hash": "6d246e458aae74b9ba11d9609676db33",
  "result": {
    "engine": "jupyter",
    "markdown": "# Array Manipulation\n\n\n\n## Changing the Shape\n\nVarious functions allow us to change the shape and contents of arrays.\n\nOne of the most important array operations is transposing. This operation switches rows with columns and vice versa.\n\n::: {#b85cef87 .cell execution_count=2}\n``` {.python .cell-code}\nmatrix = np.array([[1, 2, 3], [4, 5, 6]])\nprint(matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1 2 3]\n [4 5 6]]\n```\n:::\n:::\n\n\nIf we now transpose this array, we get:\n\n::: {#35949330 .cell execution_count=3}\n``` {.python .cell-code}\nprint(np.transpose(matrix))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1 4]\n [2 5]\n [3 6]]\n```\n:::\n:::\n\n\nIf we have this matrix and want to turn it into a vector, we can use the `np.flatten()` function:\n\n::: {#2a0565c1 .cell execution_count=4}\n``` {.python .cell-code}\nvector = matrix.flatten()\nprint(vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 2 3 4 5 6]\n```\n:::\n:::\n\n\nTo return to a two-dimensional data structure, we use the function `np.reshape(target, shape)`:\n\n::: {#397c7bfe .cell execution_count=5}\n``` {.python .cell-code}\nprint(np.reshape(matrix, [3, 2]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1 2]\n [3 4]\n [5 6]]\n```\n:::\n:::\n\n\nIf we want to expand, shrink, or modify the content of an existing array, NumPy also provides suitable functions.\n\nIf we have an empty array or want to add elements to an existing array, we use the `np.append()` function. This function appends a value to the existing array.\n\n::: {#d65f1555 .cell execution_count=6}\n``` {.python .cell-code}\narray = np.array([1, 2, 3, 4, 5, 6])\n\nnew_array = np.append(array, 7)\nprint(new_array)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 2 3 4 5 6 7]\n```\n:::\n:::\n\n\nSometimes we need to insert a value not at the end but at a specific position in the array. The appropriate tool here is the function `np.insert(array, position, insertion)`. In the following example, the number 7 is inserted at the third position.\n\n::: {#8866a4fe .cell execution_count=7}\n``` {.python .cell-code}\narray = np.array([1, 2, 3, 4, 5, 6])\n\nnew_array = np.insert(array, 3, 7)\nprint(new_array)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 2 3 7 4 5 6]\n```\n:::\n:::\n\n\nJust like we can insert new elements, we can also delete elements. For this, we use the function `np.delete(array, position)`, which takes the array and the position of the element to delete.\n\n::: {#37ce5409 .cell execution_count=8}\n``` {.python .cell-code}\narray = np.array([1, 2, 3, 4, 5, 6])\n\nnew_array = np.delete(array, 3)\nprint(new_array)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 2 3 5 6]\n```\n:::\n:::\n\n\nLastly, letâ€™s look at joining two arrays. In the following example, array `b` is appended to array `a` using the function `np.concatenate((array a, array b))`.\n\n::: {#80268bfb .cell execution_count=9}\n``` {.python .cell-code}\na = np.array([1, 2, 3, 4, 5, 6])\nb = np.array([7, 8, 9, 10])\n\nnew_array = np.concatenate((a, b))\nprint(new_array)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[ 1  2  3  4  5  6  7  8  9 10]\n```\n:::\n:::\n\n\n## Sorting Arrays\n\nNumPy also provides the ability to sort arrays. In the following example, we start with an unsorted array. Using the `np.sort()` function, we obtain a sorted array.\n\n::: {#0a0a30fc .cell execution_count=10}\n``` {.python .cell-code}\nimport numpy as np\nunsorted = np.array([4, 2, 1, 6, 3, 5])\n\nsorted_array = np.sort(unsorted)\n\nprint(sorted_array)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 2 3 4 5 6]\n```\n:::\n:::\n\n\n## Sublists with Unique Values\n\nWhen working with data where, for example, projects are assigned employee IDs, there may be a finite number of employee IDs that appear multiple times if an employee works on several projects.\n\nIf we want a list where each number appears only once, we can use the `np.unique` function.\n\n::: {#300b664f .cell execution_count=11}\n``` {.python .cell-code}\nimport numpy as np\nlist_with_duplicates = np.array([4, 1, 1, 6, 3, 4, 7, 3, 3])\n\nunique_values = np.unique(list_with_duplicates)\n\nprint(unique_values)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 3 4 6 7]\n```\n:::\n:::\n\n\nIf we also set the option `return_counts=True`, a second variable will store how often each value occurs.\n\n::: {#9f169f5b .cell execution_count=12}\n``` {.python .cell-code}\nimport numpy as np\nlist_with_duplicates = np.array([4, 1, 1, 6, 3, 4, 7, 3, 3])\n\nunique_values, counts = np.unique(list_with_duplicates, return_counts=True)\n\nprint(counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2 3 2 1 1]\n```\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n\n## Mini Exercise: Array Manipulation\n\nGiven the following two-dimensional array named `matrix`:\n\n::: {#d4ae3c8f .cell execution_count=13}\n``` {.python .cell-code}\nmatrix = np.array([\n    [4, 7, 2, 8],\n    [1, 5, 3, 6],\n    [9, 2, 4, 7]\n])\n```\n:::\n\n\n1. Change the shape of the array `matrix` into a one-dimensional array.\n2. Sort the one-dimensional array in ascending order.\n3. Change the shape of the sorted array into a two-dimensional array with 2 rows and 6 columns.\n4. Determine the unique elements in the original array `matrix` and print them.\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Solution\n\n::: {#fafdff87 .cell execution_count=14}\n``` {.python .cell-code}\nmatrix = np.array([\n    [4, 7, 2, 8],\n    [1, 5, 3, 6],\n    [9, 2, 4, 7]\n])\n\n# 1. Change to a one-dimensional array\nflat_array = matrix.flatten()\n\n# 2. Sort the one-dimensional array in ascending order\nsorted_array = np.sort(flat_array)\n\n# 3. Reshape the sorted array into a 2x6 array\nreshaped_array = sorted_array.reshape(2, 6)\n\n# 4. Find the unique elements in the original array\nunique_elements_original = np.unique(matrix)\n```\n:::\n\n\n:::\n\n:::\n\n",
    "supporting": [
      "array_manipulation_en_files"
    ],
    "filters": [],
    "includes": {}
  }
}