{
  "hash": "f732c55ade5acdcbb8d4993d7a26cf0d",
  "result": {
    "engine": "jupyter",
    "markdown": "# Slicing\n\n\n\n## Basic Slicing with Numeric Indices\n\n![Accessing individual axes for one-, two-, and three-dimensional arrays including examples](../skript/00-bilder/slicing.png){#fig-slicing fig-alt=\"Selection of respective axes for NumPy arrays of different dimensions, illustrated with stacked blocks\"}\n\nTo select data within an array, use the following formats:\n\n1. `[a]` returns the single value at position `a`\n2. `[a:b]` returns all values from position `a` up to (but not including) `b`\n3. `[a:b:c]` returns values from position `a` to `b-1` in steps of `c`\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nlist = np.array([1, 2, 3, 4, 5, 6])\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Selecting the first element\nlist[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nnp.int64(1)\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Selecting the last element\nlist[-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nnp.int64(6)\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Selecting a range of elements\nlist[1:4]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\narray([2, 3, 4])\n```\n:::\n:::\n\n\nFor two-dimensional arrays, you use a comma to separate the selection along the first and second dimensions.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nmatrix = np.array([[1, 2, 3], [4, 5, 6]])\n```\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Selecting a single element\nmatrix[1,1]\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nnp.int64(5)\n```\n:::\n:::\n\n\nFor three-dimensional arrays, an additional index is used, again separated by commas. The order remains: first, second, then third dimension.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nmatrix_3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\nprint(matrix_3d)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[[ 1  2  3]\n  [ 4  5  6]]\n\n [[ 7  8  9]\n  [10 11 12]]]\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Selecting a specific element\nmatrix_3d[1,0,2]\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nnp.int64(9)\n```\n:::\n:::\n\n\n## Slicing with Boolean Values (Boolean Masking)\n\nBoolean slicing uses a boolean mask to select specific elements from an array. The mask is an array of the same length as the original, consisting of `True` or `False` values.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# Create a sample array\na = np.array([1, 2, 3, 4, 5, 6])\n\n# Create the mask\nmaske = a > 3\n\nprint(maske)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[False False False  True  True  True]\n```\n:::\n:::\n\n\nThis results in an array of boolean values. Applying this mask to the original array returns all elements where the mask is `True`.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Applying the mask\nprint(a[maske])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[4 5 6]\n```\n:::\n:::\n\n\n::: {.callout-warning}\n\nUsing boolean arrays is only possible with the NumPy module. This approach cannot be applied to native Python lists. In such cases, you must iterate over the list manually.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\na = [1, 2, 3, 4, 5, 6]\nresult = [x for x in a if x > 3]\nprint(result) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[4, 5, 6]\n```\n:::\n:::\n\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n\n## Mini Exercise: Array Slicing\n\nSelect the colored sections of the array `matrix` using the slicing techniques you just learned.\n\n![](../skript/00-bilder/exercise_slicing.svg)\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nmatrix = np.array([\n    [2, 11, 18, 47, 33, 48, 9, 31, 8, 41],\n    [55, 1, 8, 3, 91, 56, 17, 54, 23, 12],\n    [19, 99, 56, 72, 6, 13, 34, 16, 77, 56],\n    [37, 75, 67, 5, 46, 98, 57, 19, 14, 7],\n    [4, 57, 32, 78, 56, 12, 43, 61, 3, 88],\n    [96, 16, 92, 18, 50, 90, 35, 15, 36, 97],\n    [75, 4, 38, 53, 1, 79, 56, 73, 45, 56],\n    [15, 76, 11, 93, 87, 8, 2, 58, 86, 94],\n    [51, 14, 60, 57, 74, 42, 59, 71, 88, 52],\n    [49, 6, 43, 39, 17, 18, 95, 6, 44, 75]\n])\n```\n:::\n\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Solution\n\n* Red: `matrix[1,3]`\n* Green: `matrix[4:6,2:6]`\n* Pink: `matrix[:,7]`\n* Orange: `matrix[7,:5]`\n* Blue: `matrix[-1,-1]`\n\n:::\n\n:::\n\n",
    "supporting": [
      "array_slicing_en_files/figure-pdf"
    ],
    "filters": []
  }
}