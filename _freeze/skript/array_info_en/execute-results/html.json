{
  "hash": "762fda4093a034e24168c4003b1446c9",
  "result": {
    "engine": "jupyter",
    "markdown": "# Size, Structure, and Type\n\n\n\nIf you're unsure about the structure or shape of an array, or if you want to use this information for loops, NumPy offers the following functions to retrieve it:\n\n::: {#0886ee0b .cell execution_count=2}\n``` {.python .cell-code}\nmatrix = np.array([[1, 2, 3], [4, 5, 6]])\n```\n:::\n\n\n`np.shape()` returns the length of each dimension in the form of a tuple.\n\n::: {#5a716fad .cell execution_count=3}\n``` {.python .cell-code}\nnp.shape(matrix)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n(2, 3)\n```\n:::\n:::\n\n\nThe native Python function `len()` only returns the length of the first dimension, i.e., the number of elements in the outer brackets. In the example above, `len()` sees the two lists `[1, 2, 3]` and `[4, 5, 6]`.\n\n::: {#4b936249 .cell execution_count=4}\n``` {.python .cell-code}\nlen(matrix)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n2\n```\n:::\n:::\n\n\nThe function `np.ndim()` returns the number of dimensions, unlike `np.shape()`.\n\n::: {#ec4515e3 .cell execution_count=5}\n``` {.python .cell-code}\nnp.ndim(matrix)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n2\n```\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## The output of `np.ndim()` can also be derived using `np.shape()` and a native Python function. How?\n\n`np.ndim()` simply returns the length of the tuple from `np.shape()`:\n\n::: {#4f819aa1 .cell execution_count=6}\n``` {.python .cell-code}\nlen(np.shape(matrix))\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n2\n```\n:::\n:::\n\n\n:::\n\nIf you want to know the total number of elements in an array, you can use the function `np.size()`.\n\n::: {#d5249a40 .cell execution_count=7}\n``` {.python .cell-code}\nnp.size(matrix)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n6\n```\n:::\n:::\n\n\nNumPy arrays can contain various data types. Below we have three different arrays with different data types:\n\n::: {#9ab0c308 .cell execution_count=8}\n``` {.python .cell-code}\ntyp_a = np.array([1, 2, 3, 4, 5])\ntyp_b = np.array([0.1, 0.2, 0.3, 0.4, 0.5])\ntyp_c = np.array([\"Monday\", \"Tuesday\", \"Wednesday\"])\n```\n:::\n\n\nWith the method `np.dtype`, we can retrieve the data type of arrays. Usually, this returns the type along with a number that represents the number of bytes needed to store the values. The array *typ_a* has the data type `int64`, meaning whole numbers.\n\n::: {#b05a513a .cell execution_count=9}\n``` {.python .cell-code}\nprint(typ_a.dtype)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nint64\n```\n:::\n:::\n\n\nThe array *typ_b* has the data type `float64`, where float represents floating-point numbers.\n\n::: {#77a4716c .cell execution_count=10}\n``` {.python .cell-code}\nprint(typ_b.dtype)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfloat64\n```\n:::\n:::\n\n\nThe array *typ_c* has the data type `U8`, where `U` stands for Unicode. The text is stored in Unicode format.\n\n::: {#a483fcf1 .cell execution_count=11}\n``` {.python .cell-code}\nprint(typ_c.dtype)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<U9\n```\n:::\n:::\n\n\nBelow is a table of typical data types you'll commonly encounter in NumPy:\n\n| Data Type            | NumPy Name | Examples                     |\n|----------------------|------------|------------------------------|\n| Boolean              | `bool`     | [True, False, True]          |\n| Integer              | `int`      | [-2, 5, -6, 7, 3]            |\n| Unsigned Integer     | `uint`     | [1, 2, 3, 4, 5]              |\n| Floating Point       | `float`    | [1.3, 7.4, 3.5, 5.5]         |\n| Complex Numbers      | `complex`  | [-1 + 9j, 2 - 77j, 72 + 11j] |\n| Text (Unicode)       | `U`        | [\"monday\", \"tuesday\"]        |\n\n: Typical Data Types in NumPy {#tbl-datatypes .striped .hover}\n\n::: {.callout-tip collapse=\"true\"}\n\n## Intermediate Exercise: Reading Array Information\n\nGiven the following matrix:\n\n::: {#7843458c .cell execution_count=12}\n``` {.python .cell-code}\nmatrix = np.array([[[ 0,  1,  2,  3],\n                    [ 4,  5,  6,  7],\n                    [ 8,  9, 10, 11]],\n\n                   [[12, 13, 14, 15],\n                    [16, 17, 18, 19],\n                    [20, 21, 22, 23]],\n\n                   [[24, 25, 26, 27],\n                    [28, 29, 30, 31],\n                    [32, 33, 34, 35]]])\n```\n:::\n\n\nVisually determine the number of dimensions and the length of each dimension. What is the data type of the elements in this matrix?\n\nThen verify your results by applying the appropriate NumPy functions.\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Solution\n\n::: {#660c836d .cell execution_count=13}\n``` {.python .cell-code}\nmatrix = np.array([[[ 0,  1,  2,  3],\n                    [ 4,  5,  6,  7],\n                    [ 8,  9, 10, 11]],\n\n                   [[12, 13, 14, 15],\n                    [16, 17, 18, 19],\n                    [20, 21, 22, 23]],\n\n                   [[24, 25, 26, 27],\n                    [28, 29, 30, 31],\n                    [32, 33, 34, 35]]])\n\nnum_dimensions = np.ndim(matrix)\nprint(\"Number of dimensions: \", num_dimensions)\n\ndimension_lengths = np.shape(matrix)\nprint(\"Lengths of each dimension: \", dimension_lengths)\n\nprint(matrix.dtype)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of dimensions:  3\nLengths of each dimension:  (3, 3, 4)\nint64\n```\n:::\n:::\n\n\n:::\n:::\n\n",
    "supporting": [
      "array_info_en_files"
    ],
    "filters": [],
    "includes": {}
  }
}