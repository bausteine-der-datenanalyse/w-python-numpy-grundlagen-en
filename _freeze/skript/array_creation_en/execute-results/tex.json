{
  "hash": "e6a3aeb172ff314e53a3a5bcd8a806bf",
  "result": {
    "engine": "jupyter",
    "markdown": "# Creating NumPy Arrays\n\n\n\nIn Python, vectors are typically represented by lists and matrices by\nnested lists. For example, the vector\n\n:::: {layout-ncol=3 layout-valign=\"center\" layout-halign=\"center\"}\n$$\n(1, 2, 3, 4, 5, 6) \n$$\n\n::: {.justify}\nand the matrix\n:::\n\n$$\n\\begin{pmatrix}\n1 & 2 & 3\\\\\n4 & 5 & 6\n\\end{pmatrix}\n$$\n::::\n\ncan be natively created in Python like this:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nlst = [1, 2, 3, 4, 5, 6]\n\nmatrix = [[1, 2, 3], [4, 5, 6]]\n\nprint(lst)\nprint(matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 4, 5, 6]\n[[1, 2, 3], [4, 5, 6]]\n```\n:::\n:::\n\n\nIf you want to use NumPy arrays, you can use the `np.array()` command:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nlst = np.array([1, 2, 3, 4, 5, 6])\n\nmatrix = np.array([[1, 2, 3], [4, 5, 6]])\n\nprint(lst)\nprint(matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 2 3 4 5 6]\n[[1 2 3]\n [4 5 6]]\n```\n:::\n:::\n\n\nIf you look at the output from the `print()` commands, two things stand out.\nFirst, the commas are gone, and second, the matrix is printed in a clean,\nreadable format.\n\nIt is also possible to create higher-dimensional arrays. This requires \nanother level of nesting. In the following example, a three-dimensional \nmatrix is created:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nmatrix_3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\n```\n:::\n\n\nIt is considered good practice to always initialize arrays. NumPy offers \nthree functions to create pre-initialized arrays. Alternatively, arrays can \nbe initialized with fixed values. You can use `np.zeros()` to set all values \nto 0 or `np.ones()` to initialize all values with 1. These functions take the \nshape in the form `[rows, columns]`. If you want to initialize all elements \nwith a specific value, use the `np.full()` function.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nnp.zeros([2,3])\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\narray([[0., 0., 0.],\n       [0., 0., 0.]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nnp.ones([2,3])\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\narray([[1., 1., 1.],\n       [1., 1., 1.]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nnp.full([2,3],7)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\narray([[7, 7, 7],\n       [7, 7, 7]])\n```\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n\n## How could you create arrays filled with a specific value x?\n\nThe trick is to initialize an array with `np.ones()` and then multiply the \narray by the number `x`. In the following example, `x = 5`:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nnp.ones([2,3]) * 5\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\narray([[5., 5., 5.],\n       [5., 5., 5.]])\n```\n:::\n:::\n\n\n:::\n\nIf you want to create a vector with evenly spaced values, e.g., for an axis \nin a plot, NumPy offers two options. Use `np.linspace(start, stop, #values)` \nor `np.arange(start, stop, step)` to generate such arrays.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nnp.linspace(0,1,11)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\narray([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nnp.arange(0,10,2)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\narray([0, 2, 4, 6, 8])\n```\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n\n## Practice Exercise: Array Creation\n\nCreate one NumPy array for each of the following tasks:\n\n1. with the values 1, 7, 42, 99  \n2. ten times the number 5  \n3. with numbers from 35 **up to and including** 50  \n4. with all even numbers from 20 **up to and including** 40  \n5. a matrix with 5 columns and 4 rows filled with the value 4  \n6. with 10 values evenly spaced from 22 **up to and including** 40\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Solution\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# 1. \nprint(np.array([1, 7, 42, 99]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[ 1  7 42 99]\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# 2. \nprint(np.full(10,5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[5 5 5 5 5 5 5 5 5 5]\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# 3. \nprint(np.arange(35, 51))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50]\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# 4. \nprint(np.arange(20, 41, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[20 22 24 26 28 30 32 34 36 38 40]\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# 5. \nprint(np.full([4,5],4))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[4 4 4 4 4]\n [4 4 4 4 4]\n [4 4 4 4 4]\n [4 4 4 4 4]]\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# 6. \nprint(np.linspace(22, 40, 10))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[22. 24. 26. 28. 30. 32. 34. 36. 38. 40.]\n```\n:::\n:::\n\n\n:::\n\n:::\n\n",
    "supporting": [
      "array_creation_en_files/figure-pdf"
    ],
    "filters": []
  }
}