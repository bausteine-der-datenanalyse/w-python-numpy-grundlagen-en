{
  "hash": "1233d8ed0091ef3d9dbdc978546e7b8f",
  "result": {
    "engine": "jupyter",
    "markdown": "# Reading and Writing Files\n\n\n\nThe `numpy` module provides functions for reading and writing structured text files.\n\n## Reading Files\n\nTo read structured text files, such as CSV (comma-separated values) files, the `np.loadtxt()` function can be used. It takes the filename to be read as its main argument, along with other options to define the data structure. The return value is a (multi-dimensional) array.\n\nIn the following example, the file [TC01.csv](https://firedynamics.github.io/LectureComputerScience/_downloads/0d1a3bfbc82fa134e08585d6151e9f46/TC01.csv) is read and its contents are plotted. The first line of the file is ignored, as it is interpreted as a comment (starting with the `#` character).\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfilename = '01-daten/TC01.csv'\ndata = np.loadtxt(filename)\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nprint(\"Data:\", data)\nprint(\"Shape:\", data.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nData: [20.1 20.1 20.1 ... 24.3 24.2 24.2]\nShape: (1513,)\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nplt.plot(data)\nplt.xlabel('Data Index')\nplt.ylabel('Temperature in Â°C');\n```\n\n::: {.cell-output .cell-output-display}\n![](array_read_n_write_en_files/figure-pdf/cell-5-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nBy default, the `np.loadtxt()` function expects comma-separated values. If the data is separated by a different character, the `delimiter = \"\"` option can be used to specify a different delimiter. For example, if the separator is a semicolon, the function call would look like:\n`np.loadtxt(data.txt, delimiter = \";\")`\n\nIf the file starts with lines containing additional information such as units or experiment details, these can be skipped using the `skiprows= #rows` option.\n\n## Writing Files\n\nTo write arrays to files, you can use the `np.savetxt()` function available in `numpy`. At a minimum, it requires the array to be written and a filename. Numerous formatting and structuring options are also available.\n\nThe following example scales the data read earlier and writes every tenth value to a new file. A comment (`header` argument) is also added at the beginning of the file. The output format of the numbers can be specified using the `fmt` argument. The format is similar to the formatting style used in formatted strings.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nvalue_range = np.max(data) - np.min(data)\ndata_scaled = (data - np.min(data)) / value_range\ndata_scaled = data_scaled[::10]\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nplt.plot(data_scaled)\nplt.xlabel('Data Index')\nplt.ylabel('Scaled Temperature');\n```\n\n::: {.cell-output .cell-output-display}\n![](array_read_n_write_en_files/figure-pdf/cell-7-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nWhen writing the file, a multi-line comment is defined using the newline character `\\n`. The floating-point numbers are formatted with `%5.2f`, which means 5 total characters with 2 digits after the decimal point.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Assignment is split into multiple lines due to the narrow display in the script\ncomment = f'Data from {filename} scaled to the range ' + \\\n           '0 to 1 \\noriginal min / max: ' + \\\n           f'{np.min(data)}/{np.max(data)}'\nnew_filename = '01-daten/TC01_scaled.csv'\n\nnp.savetxt(new_filename, data_scaled, \n           header=comment, fmt='%5.2f')\n```\n:::\n\n\nTo illustrate, the first lines of the newly created file are printed.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Read the first lines of the newly created file\nfile = open(new_filename, 'r')\nfor i in range(10):\n    print(file.readline(), end='')\nfile.close()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Data from 01-daten/TC01.csv scaled to the range 0 to 1 \n# original min / max: 20.1/31.1\n 0.00\n 0.00\n 0.00\n 0.01\n 0.01\n 0.01\n 0.01\n 0.01\n```\n:::\n:::\n\n\n<!-- ::: {.callout-tip collapse=\"true\"}\n\n## Intermediate Exercise: Reading and Writing Array Data\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Solution\n\n::: -->\n\n",
    "supporting": [
      "array_read_n_write_en_files/figure-pdf"
    ],
    "filters": []
  }
}