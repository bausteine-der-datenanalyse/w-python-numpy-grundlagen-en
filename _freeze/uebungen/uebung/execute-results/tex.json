{
  "hash": "2a04f3a7164464721aae7c1f23a668dc",
  "result": {
    "engine": "jupyter",
    "markdown": "# Übung \n\n## Aufgabe 1 Filmdatenbank\n\nIn der ersten Aufgabe wollen wir fiktive Daten für Filmbewertungen untersuchen. Das Datenset ist dabei vereinfacht und beinhaltet folgende Spalten:\n\n1. Film ID\n2. Benutzer ID\n3. Bewertung\n\nHier ist das Datenset:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\nbewertungen = np.array([\n    [1, 101, 4.5],\n    [1, 102, 3.0],\n    [2, 101, 2.5],\n    [2, 103, 4.0],\n    [3, 101, 5.0],\n    [3, 104, 3.5],\n    [3, 105, 4.0]\n])\n```\n:::\n\n\n::: {.callout-tip }\n\n## a) Bestimmen Sie die jemals niedrigste und höchste Bewertung, die je gegeben wurde\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Lösung\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nniedrigste_bewertung = np.min(bewertungen[:,2])\n\nprint(\"Die niedrigste jemals gegebene Bertung ist:\", niedrigste_bewertung)\n\nhoechste_bewertung = np.max(bewertungen[:,2])\n\nprint(\"Die hoechste jemals gegebene Bertung ist:\", hoechste_bewertung)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDie niedrigste jemals gegebene Bertung ist: 2.5\nDie hoechste jemals gegebene Bertung ist: 5.0\n```\n:::\n:::\n\n\n:::\n:::\n\n<!-- ----------------------------------------------------------------------- -->\n\n::: {.callout-tip }\n\n## b) Nennen Sie alle Bewertungen für Film 1\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Lösung\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nbewertungen_film_1 = bewertungen[np.where(bewertungen[:,0]==1)]\n\nprint(\"Bewertungen für Film 1:\\n\", bewertungen_film_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBewertungen für Film 1:\n [[  1.  101.    4.5]\n [  1.  102.    3. ]]\n```\n:::\n:::\n\n\n:::\n:::\n\n<!-- ----------------------------------------------------------------------- -->\n\n::: {.callout-tip }\n\n## c) Nennen Sie alle Bewertungen von Person 101\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Lösung\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nbewertungen_101 = bewertungen[np.where(bewertungen[:,1]==101)]\n\nprint(\"Bewertungen von Person 101:\\n\", bewertungen_101)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBewertungen von Person 101:\n [[  1.  101.    4.5]\n [  2.  101.    2.5]\n [  3.  101.    5. ]]\n```\n:::\n:::\n\n\n:::\n:::\n\n<!-- ----------------------------------------------------------------------- -->\n\n::: {.callout-tip }\n\n## d) Berechnen Sie die mittlere Bewertung für jeden Film und geben Sie diese nacheinander aus\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Lösung\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfor ID in [1, 2, 3]:\n\n    mittelwert = np.mean(bewertungen[np.where(bewertungen[:,0]==ID),2])\n\n    print(\"Die Mittlere Bewertung für Film\", ID, \"beträgt:\", mittelwert) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDie Mittlere Bewertung für Film 1 beträgt: 3.75\nDie Mittlere Bewertung für Film 2 beträgt: 3.25\nDie Mittlere Bewertung für Film 3 beträgt: 4.166666666666667\n```\n:::\n:::\n\n\n:::\n:::\n\n<!-- ----------------------------------------------------------------------- -->\n\n::: {.callout-tip }\n\n## e) Finden SIe den Film mit der höchsten Bewertung\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Lösung\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nindex_hoechste_bewertung = np.argmax(bewertungen[:,2])\n\nprint(bewertungen[index_hoechste_bewertung,:])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[  3. 101.   5.]\n```\n:::\n:::\n\n\n:::\n:::\n\n<!-- ----------------------------------------------------------------------- -->\n\n::: {.callout-tip }\n\n## f) Finden Sie die Person mit den meisten Bewertungen\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Lösung\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\neinzigartige_person, anzahl = np.unique(bewertungen[:, 1],return_counts=True)\n\nmeist_aktiver_person = einzigartige_person[np.argmax(anzahl)]\n\nprint(\"Personen mit den meisten Bewertungen:\", meist_aktiver_person)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPersonen mit den meisten Bewertungen: 101.0\n```\n:::\n:::\n\n\n:::\n:::\n\n<!-- ----------------------------------------------------------------------- -->\n\n::: {.callout-tip }\n\n## g) Nennen Sie alle Filme mit einer Wertung von 4 oder besser.\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Lösung\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nindex_bewertung_besser_vier = bewertungen[:,2] >= 4\n\nprint(\"Filme mit einer Wertung von 4 oder besser:\")\n\nprint(bewertungen[index_bewertung_besser_vier,:])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFilme mit einer Wertung von 4 oder besser:\n[[  1.  101.    4.5]\n [  2.  103.    4. ]\n [  3.  101.    5. ]\n [  3.  105.    4. ]]\n```\n:::\n:::\n\n\n:::\n:::\n\n<!-- ----------------------------------------------------------------------- -->\n\n::: {.callout-tip }\n\n## h) Film Nr. 4 ist erschienen. Der Film wurde von Person 102 mit einer Note von 3.5 bewertet. Fügen Sie diesen zur Datenbank hinzu.\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Lösung\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nneue_bewertung = np.array([4, 102, 3.5])\n\nbewertungen = np.append(bewertungen, [neue_bewertung], axis=0)\n\nprint(bewertungen)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[  1.  101.    4.5]\n [  1.  102.    3. ]\n [  2.  101.    2.5]\n [  2.  103.    4. ]\n [  3.  101.    5. ]\n [  3.  104.    3.5]\n [  3.  105.    4. ]\n [  4.  102.    3.5]]\n```\n:::\n:::\n\n\n:::\n:::\n\n<!-- ----------------------------------------------------------------------- -->\n\n::: {.callout-tip }\n\n## i) Person 102 hat sich Film Nr. 1 nochmal angesehen und hat das Ende jetzt doch verstanden. Dementsprechend soll die Berwertung jetzt auf 5.0 geändert werden.\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Lösung\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nbewertungen[(bewertungen[:, 0] == 1) & \n            (bewertungen[:, 1] == 102), 2] = 5.0\n\nprint(\"Aktualisieren der Bewertung:\\n\", bewertungen)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAktualisieren der Bewertung:\n [[  1.  101.    4.5]\n [  1.  102.    5. ]\n [  2.  101.    2.5]\n [  2.  103.    4. ]\n [  3.  101.    5. ]\n [  3.  104.    3.5]\n [  3.  105.    4. ]\n [  4.  102.    3.5]]\n```\n:::\n:::\n\n\n:::\n:::\n\n\n## Aufgabe 2 - Kryptographie - Caesar-Chiffre\n\nIn dieser Aufgabe wollen wir Text sowohl ver- als auch entschlüsseln. \n\nJedes Zeichen hat über die sogenannte ASCII-Tabelle einen Zahlenwert zugeordnet. \n\n| Buchstabe | ASCII Code | Buchstabe| ASCII Code |\n|-----------|------------|----------|------------|\n| a         | 97         | n        | 110        |\n| b         | 98         | o        | 111        |\n| c         | 99         | p        | 112        |\n| d         | 100        | q        | 113        |\n| e         | 101        | r        | 114        |\n| f         | 102        | s        | 115        |\n| g         | 103        | t        | 116        |\n| h         | 104        | u        | 117        |\n| i         | 105        | v        | 118        |\n| j         | 106        | w        | 119        |\n| k         | 107        | x        | 120        |\n| l         | 108        | y        | 121        |\n| m         | 109        | z        | 122        |\n\n: Ascii-Tabelle {#tbl-ascii .striped .hover}\n\nDer Einfachheit halber ist im Folgenden schon der Code zur Umwandlung von \nBuchstaben in Zahlenwerten und wieder zurück aufgeführt. Außerdem beschränken \nwir uns auf Texte mit kleinen Buchstaben.\n\nIhre Aufgabe ist nun die Zahlenwerte zu verändern.\n\nZunächste wollen wir eine einfache Caesar-Chiffre anwenden. Dabei werden alle \nBuchstaben um eine gewisse Anzahl verschoben. Ist Beispielsweise der der \nVerschlüsselungswert \"1\" wird aus einem A ein B, einem M, ein N. Ist der Wert \n\"4\" wird aus einem A ein E und aus einem M ein Q. Die Verschiebung findet \nzyklisch statt, das heißt bei einer Verschiebung von 1 wird aus einem Z ein A.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nimport numpy as np\n\n# Funktion, die einen Buchstaben in ihren ASCII-Wert umwandelt\ndef buchstabe_zu_ascii(c):\n    return np.array([ord(c)])\n\n# Funktion, die einen ASCII-Wert in den passenden Buchstaben umwandelt\ndef ascii_zu_buchstabe(a):\n    return chr(a)\n```\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n\n## 1. Überlegen Sie sich zunächst wie man diese zyklische Verschiebung mathematisch ausdrücken könnte (Hinweis: Modulo Rechnung)\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Lösung\n\n$$ \\textrm{ASCII}_{\\textrm{verschoben}} = (\\textrm{ASCII} - 97 + \\textrm{Versatz}) \\textrm{ mod } 26 + 97$$\n\n:::\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n\n## 2. Schreiben Sie Code der mit einer Schleife alle Zeichen umwandelt. \n\nZunächst sollen alle Zeichen in Ascii Code umgewandelt werden. Dann wird die Formel auf die Zahlenwerte angewendet und schlussendlich in einer dritten schleife wieder alle Werte in Buchstaben übersetzt.\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Lösung\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nimport numpy as np\n\n# Funktion, die einen Buchstaben in ihren ASCII-Wert umwandelt\ndef buchstabe_zu_ascii(c):\n    return ord(c)\n\n# Funktion, die einen ASCII-Wert in den passenden Buchstaben umwandelt\ndef ascii_zu_buchstabe(a):\n    return chr(a)\n\nklartext = \"abrakadabra\"\nversatz = 3\n\numgewandelter_text = []\nverschluesselte_zahl = []\nverschluesselter_text= []\n\n\n\nfor buchstabe in klartext:\n    umgewandelter_text.append(buchstabe_zu_ascii(buchstabe))\nprint(umgewandelter_text)\n\n\nfor zahl in umgewandelter_text:    \n    verschluesselt = (zahl - 97 + versatz) % 26 + 97\n    verschluesselte_zahl.append(verschluesselt)\nprint(verschluesselte_zahl)\n\n\nfor zahl in verschluesselte_zahl:    \n    verschluesselter_text.append(ascii_zu_buchstabe(zahl))\nprint(verschluesselter_text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[97, 98, 114, 97, 107, 97, 100, 97, 98, 114, 97]\n[100, 101, 117, 100, 110, 100, 103, 100, 101, 117, 100]\n['d', 'e', 'u', 'd', 'n', 'd', 'g', 'd', 'e', 'u', 'd']\n```\n:::\n:::\n\n\n:::\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n\n## 3. Ersetzen Sie die Schleife, indem Sie die Rechenoperation mit einem NumPy-Array durchführen\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Lösung\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nimport numpy as np\n\n# Funktion, die einen Buchstaben in ihren ASCII-Wert umwandelt\ndef buchstabe_zu_ascii(c):\n    return ord(c)\n\n# Funktion, die einen ASCII-Wert in den passenden Buchstaben umwandelt\ndef ascii_zu_buchstabe(a):\n    return chr(a)\n\nklartext = \"abrakadabra\"\nversatz = 3\n\numgewandelter_text = []\nverschluesselte_zahl = []\nverschluesselter_text= []\n\n\n\nfor buchstabe in klartext:\n    umgewandelter_text.append(buchstabe_zu_ascii(buchstabe))\nprint(umgewandelter_text)\n\numgewandelter_text = np.array(umgewandelter_text)\nverschluesselte_zahl = (umgewandelter_text - 97 + versatz) % 26 + 97\nprint(verschluesselte_zahl)\n\nfor zahl in verschluesselte_zahl:    \n    verschluesselter_text.append(ascii_zu_buchstabe(zahl))\nprint(verschluesselter_text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[97, 98, 114, 97, 107, 97, 100, 97, 98, 114, 97]\n[100 101 117 100 110 100 103 100 101 117 100]\n['d', 'e', 'u', 'd', 'n', 'd', 'g', 'd', 'e', 'u', 'd']\n```\n:::\n:::\n\n\n:::\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n\n## 4. Schreiben sie den Code so um, dass der verschlüsselte Text entschlüsselt wird.\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n\n## Lösung\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nimport numpy as np\n\n# Funktion, die einen Buchstaben in ihren ASCII-Wert umwandelt\ndef buchstabe_zu_ascii(c):\n    return ord(c)\n\n# Funktion, die einen ASCII-Wert in den passenden Buchstaben umwandelt\ndef ascii_zu_buchstabe(a):\n    return chr(a)\n\n\nversatz = 3\n\numgewandelter_text = []\nverschluesselte_zahl = []\nentschluesselter_text= []\n\n\n\nfor buchstabe in verschluesselter_text:\n    umgewandelter_text.append(buchstabe_zu_ascii(buchstabe))\nprint(umgewandelter_text)\n\numgewandelter_text = np.array(umgewandelter_text)\nverschluesselte_zahl = (umgewandelter_text - 97 - versatz) % 26 + 97\nprint(verschluesselte_zahl)\n\nfor zahl in verschluesselte_zahl:    \n    entschluesselter_text.append(ascii_zu_buchstabe(zahl))\nprint(entschluesselter_text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[100, 101, 117, 100, 110, 100, 103, 100, 101, 117, 100]\n[ 97  98 114  97 107  97 100  97  98 114  97]\n['a', 'b', 'r', 'a', 'k', 'a', 'd', 'a', 'b', 'r', 'a']\n```\n:::\n:::\n\n\n:::\n\n:::\n\n",
    "supporting": [
      "uebung_files/figure-pdf"
    ],
    "filters": []
  }
}