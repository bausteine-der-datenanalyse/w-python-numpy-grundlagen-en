# Working with Arrays

## Arithmetic Functions

```{python}
#| echo: false
import numpy as np
```

One major advantage of NumPy is working with arrays. Without NumPy, you would
either have to use a `loop` or a `list comprehension` to perform operations on
all values in a list. NumPy eliminates this inconvenience.

```{python}
a = np.array([1, 2, 3, 4, 5])

b = np.array([9, 8, 7, 6, 5])
```

Basic mathematical operations like addition can be expressed in two ways:
either using the `np.add()` function or simply with the `+` operator.

```{python}
np.add(a,b)
```

```{python}
a + b
```

Without NumPy, the operation would look like this:

```{python}
result = np.ones(5)
for i in range(len(a)):
    result[i] = a[i] + b[i]

print(result)
```

For other types of arithmetic, there are functions like: `np.subtract()`,
`np.multiply()`, and `np.divide()`.

Higher-level mathematical operations also have functions:

* `np.exp(a)`
* `np.sqrt(a)`
* `np.power(a, 3)`
* `np.sin(a)`
* `np.cos(a)`
* `np.tan(a)`
* `np.log(a)`
* `a.dot(b)`

::: {.callout-warning}

## Working with Trigonometric Functions

Just like with a calculator, a common error when using trigonometric functions
(sin, cos, ...) is to input degrees instead of radians. However, the trigonometric
functions in NumPy expect values in radians.

To easily convert between degrees and radians, NumPy provides the functions 
`np.deg2rad()` and `np.rad2deg()`.

:::

## Comparisons

NumPy arrays can also be compared with one another. Letâ€™s look at the following
two arrays:

```{python}
a = np.array([1, 2, 3, 4, 5])

b = np.array([9, 2, 7, 4, 5])
```

To check whether these arrays are identical, we can use the `==` comparator.
This compares the arrays element-wise.

```{python}
a == b
```

You can also compare arrays using the `>` and `<` operators:

```{python}
a < b
```

When comparing arrays with floating point numbers, it is often necessary to 
allow for some tolerance due to small rounding errors in computations.

```{python}
a = np.array(0.1 + 0.2)
b = np.array(0.3)
a == b
```

For this case, NumPy offers a comparison function `np.isclose(a,b,atol)`, where 
`atol` stands for absolute tolerance. In the following example, an absolute 
tolerance of 0.001 is used.

```{python}
a = np.array(0.1 + 0.2)
b = np.array(0.3)
print(np.isclose(a, b, atol=0.001))
```

::: {.callout-note collapse="true"}

## Why is 0.1 + 0.2 not equal to 0.3?

Numbers are internally represented in binary. Just like 1/3 cannot be 
represented precisely with a finite number of decimal digits, some numbers 
must be rounded in binary representation.

```{python}
a = 0.1
b = 0.2
print(a + b)
```

:::

## Aggregation Functions

For many types of analysis, we need functions such as sum or mean. Letâ€™s start
with an example array `a`:

```{python}
a = np.array([1, 2, 3, 4, 8])
```

The sum is calculated using the `np.sum()` function.
```{python}
np.sum(a)
```

Of course, you can also determine the minimum and maximum of an array. The 
functions are `np.min()` and `np.max()`.

```{python}
np.min(a)
```

If you want the position of the maximum value instead of the value itself, use
`np.argmax` instead of `np.max`.

For statistical analysis, common functions are `np.mean()` for the mean,
`np.median()` for the median, and `np.std()` for the standard deviation.

```{python}
np.mean(a)
```

```{python}
np.median(a)
```

```{python}
np.std(a)
```

::: {.callout-tip collapse="true"}

## Exercise: Working with Arrays

Given two one-dimensional arrays `a` and `b`:

a = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) and  
b = np.array([5, 15, 25, 35, 45, 55, 65, 75, 85, 95])

1. Create a new array that contains the sine values of the added arrays `a` and `b`.
2. Calculate the sum, mean, and standard deviation of the elements in `a`.
3. Find the largest and smallest values in both `a` and `b`.

::: {.callout-caution icon="false" collapse="true"}

## Solution

```{python}

a = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])
b = np.array([5, 15, 25, 35, 45, 55, 65, 75, 85, 95])

# 1.
sin_ab = np.sin(a + b)

# 2.
sum_a = np.sum(a)
mean_a = np.mean(a)
std_a = np.std(a)

# 3.
max_a = np.max(a)
min_a = np.min(a)
max_b = np.max(b)
min_b = np.min(b)
```

:::
:::
